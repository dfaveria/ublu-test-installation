kind: ServiceAccount
apiVersion: v1
metadata:
  name: renderingservice
imagePullSecrets:
  - name: unblu-gcr-io
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: renderingservice-manager
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get","patch","delete"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: renderingservice
subjects:
- kind: ServiceAccount
  name: renderingservice
roleRef:
  kind: Role
  name: renderingservice-manager
  apiGroup: rbac.authorization.k8s.io
---
kind: Service
apiVersion: v1
metadata:
  name: renderingservice
spec:
  type: ClusterIP
  ports:
  - name: python
    port: 8081
  selector:
    app: unblu
    component: renderingservice
    status: available
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: renderingservice
spec:
  replicas: 2
  selector:
    matchLabels:
      status: available
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      labels:
        status: available
      annotations:
        prometheus.io/port: "8082"
        prometheus.io/scrape: "true"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - renderingservice
              topologyKey: kubernetes.io/hostname
      serviceAccountName: renderingservice
      terminationGracePeriodSeconds: 5
      containers:
      - name: renderingservice
        command:
          - /bin/bash
        args:
        - '-c'
        - "xvfb-run -a /headlessbrowser/hb --rpcServerAddress=8080 --disable-gpu --disable-dev-shm-usage --logStdout --logLevel=4 --prmthServerAddress=8082"
        image: gcr.io/unblu-containerrepo-public/rendering-service
        imagePullPolicy: Always
        ports:
        - name: grpc
          containerPort: 8080
        - name: metrics
          containerPort: 8082
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2500m
            memory: 1Gi
        readinessProbe:
          tcpSocket:
            port: grpc
          initialDelaySeconds: 7
          periodSeconds: 3
        livenessProbe:
          tcpSocket:
            port: grpc
          initialDelaySeconds: 60
      - name: python-server
        image: gcr.io/unblu-containerrepo-public/rendering-service
        imagePullPolicy: Always
        command: ['python']
        args:
          - '-u'
          - '/usr/bin/podip_scheduler.py'
          - '8081'
          - '8080'
          - '$(POD_NAME)'
          - '$(POD_IP)'
          - '$(POD_NAMESPACE)'
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        ports:
        - name: python
          containerPort: 8081
        resources:
          requests:
            cpu: 50m
            memory: 48Mi
          limits:
            cpu: 200m
            memory: 128Mi
        readinessProbe:
          tcpSocket:
            port: python
          initialDelaySeconds: 7
          periodSeconds: 3
        livenessProbe:
          tcpSocket:
            port: python
          initialDelaySeconds: 30
